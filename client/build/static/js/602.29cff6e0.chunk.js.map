{"version":3,"file":"static/js/602.29cff6e0.chunk.js","mappings":"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","sources":["components/chats/NewChat.js","components/skeleton/GroupChatSkeleton.js","components/chats/GroupChat.js","components/chats/Typing.js","components/chats/FormMessage.js","components/chats/Message.js","components/chats/ChangeName.js","components/chats/ChatDetails.js","pages/Chat.js"],"sourcesContent":["import { AiOutlineClose } from \"react-icons/ai\";\r\nimport { handleCloseOptions } from \"../../services/fetch\";\r\nimport { useContext, useState } from \"react\";\r\nimport makeRequest from \"../../services/makeRequest\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { MdRadioButtonUnchecked, MdRadioButtonChecked } from \"react-icons/md\";\r\nimport { useQueryClient } from \"@tanstack/react-query\";\r\nimport { ChatContext } from \"../../context/ChatContext\";\r\nimport Loading from \"../loadings/Loading\";\r\n\r\nconst NewChat = ({ setOpenNewchat, type, title }) => {\r\n  const { handleOpenMessage, chatSingle } = useContext(ChatContext);\r\n  const { currentUser, successMessage } = useContext(AuthContext);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n  const [loadingSearch, setLoadingSearch] = useState(false);\r\n  const [loadingNewChat, setLoadingNewChat] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState(\r\n    type === \"Chat\" ? [] : type === \"Send\" ? [] : chatSingle?.members\r\n  );\r\n\r\n  const handleSearch = async (keyword) => {\r\n    setKeyword(keyword);\r\n    if (!keyword) return;\r\n\r\n    setLoadingSearch(true);\r\n    try {\r\n      const res = await makeRequest.get(`/users/search?keyword=${keyword}`, {\r\n        headers: { Authorization: `Bearer ${currentUser.accessToken}` },\r\n      });\r\n\r\n      setResults(res.data.results);\r\n      setLoadingSearch(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setLoadingSearch(false);\r\n    }\r\n  };\r\n\r\n  const handleRemoveFriend = (userRemove) => {\r\n    setSelectedUser(selectedUser.filter((s) => s._id !== userRemove._id));\r\n  };\r\n  const handleChooseFriend = (userAdd) => {\r\n    if (selectedUser.map((s) => s._id).includes(userAdd._id)) {\r\n      return;\r\n    }\r\n\r\n    setSelectedUser([...selectedUser, userAdd]);\r\n  };\r\n\r\n  // create new chat\r\n  const queryClient = useQueryClient();\r\n  const handleChatGroup = async () => {\r\n    let members = JSON.stringify(selectedUser.map((s) => s._id));\r\n\r\n    setLoadingNewChat(true);\r\n    if (type === \"Chat\") {\r\n      // create new chat or get chat created\r\n      const res = await makeRequest.get(`/chats/${members}`, {\r\n        headers: { Authorization: `Bearer ${currentUser.accessToken}` },\r\n      });\r\n      handleOpenMessage(res.data.chat);\r\n    } else if (type === \"Add to group\" && chatSingle) {\r\n      // add member to group chat\r\n      const res = await makeRequest.patch(\r\n        `/chats/${chatSingle?._id}`,\r\n        { people: members },\r\n        {\r\n          headers: { Authorization: `Bearer ${currentUser.accessToken}` },\r\n        }\r\n      );\r\n\r\n      handleOpenMessage(res.data.chat);\r\n      successMessage(res.data.message);\r\n    } else if (type === \"Send\") {\r\n      console.log(\"Send\");\r\n    } else return;\r\n    queryClient.invalidateQueries([\"chats\"]);\r\n    setOpenNewchat(false);\r\n    setLoadingNewChat(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"newchat\"\r\n      onClick={(e) =>\r\n        e.target.className === \"newchat\" && handleCloseOptions(setOpenNewchat)\r\n      }\r\n    >\r\n      <div className=\"newchat-container\">\r\n        {loadingNewChat && <Loading />}\r\n        <p className=\"newchat-title\">{title}</p>\r\n\r\n        <div className=\"newchat-search\">\r\n          <div className=\"newchat-friend-choose\">\r\n            {selectedUser.map((item) => (\r\n              <div className=\"newchat-friend-item\" key={item._id}>\r\n                <p className=\"newchat-friend-name\">{item.name}</p>\r\n                <AiOutlineClose\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => handleRemoveFriend(item)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <span>To:</span>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search...\"\r\n            className=\"newchat-input\"\r\n            value={keyword}\r\n            onChange={(e) => handleSearch(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"newchat-search-results\">\r\n          {loadingSearch ? (\r\n            <Loading />\r\n          ) : keyword && results?.length > 0 ? (\r\n            results.map((item) => (\r\n              <div className=\"newchat-user\" key={item._id}>\r\n                <div className=\"newchat-user-info\">\r\n                  <img src={item.avatar} alt=\"\" className=\"newchat-img\" />\r\n                  <div className=\"newchat-user-name\">\r\n                    <p className=\"newchat-name\">{item.name}</p>\r\n                    <p className=\"newchat-username\">{item.username}</p>\r\n                  </div>\r\n                </div>\r\n                {selectedUser.map((s) => s._id).includes(item._id) ? (\r\n                  <MdRadioButtonChecked\r\n                    className=\"newchat-choose-user\"\r\n                    onClick={() => handleChooseFriend(item)}\r\n                  />\r\n                ) : (\r\n                  <MdRadioButtonUnchecked\r\n                    className=\"newchat-choose-user\"\r\n                    onClick={() => handleChooseFriend(item)}\r\n                  />\r\n                )}\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p style={{ textAlign: \"center\", color: \"gray\" }}>\r\n              No search results found\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"newchat-btn\">\r\n          <button className=\"newchat-btn-chat\" onClick={handleChatGroup}>\r\n            {type}\r\n          </button>\r\n        </div>\r\n\r\n        <AiOutlineClose\r\n          className=\"newchat-close\"\r\n          onClick={() => handleCloseOptions(setOpenNewchat)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewChat;\r\n","import Skeleton from \"react-loading-skeleton\";\r\n\r\nconst GroupChatSkeleton = ({ groupchat }) => {\r\n  return Array(groupchat)\r\n    .fill(0)\r\n    .map((item, i) => (\r\n      <div className=\"skeleton\" key={i}>\r\n        <div className=\"gr-sk\">\r\n          <div className=\"gr-item-sk\">\r\n            <div className=\"gr-img-sk\">\r\n              <Skeleton circle width={56} height={56} />\r\n            </div>\r\n            <div className=\"gr-info-sk\">\r\n              <Skeleton width={90} height={12} />\r\n              <Skeleton width={120} height={10} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ));\r\n};\r\n\r\nexport default GroupChatSkeleton;\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { FaRegEdit } from \"react-icons/fa\";\r\nimport {\r\n  formatTime,\r\n  getInfoChat,\r\n  handleOpenOptions,\r\n} from \"../../services/fetch\";\r\nimport NewChat from \"./NewChat\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport makeRequest from \"../../services/makeRequest\";\r\nimport { ChatContext } from \"../../context/ChatContext\";\r\nimport GroupChatSkeleton from \"../skeleton/GroupChatSkeleton\";\r\n\r\nconst GroupChat = () => {\r\n  const { handleOpenMessage, chatSingle } = useContext(ChatContext);\r\n  const { currentUser } = useContext(AuthContext);\r\n  const [openNewchat, setOpenNewchat] = useState(false);\r\n\r\n  const { isLoading, data, error } = useQuery([\"chats\"], () =>\r\n    makeRequest\r\n      .get(\"/chats/all\", {\r\n        headers: { Authorization: `Bearer ${currentUser.accessToken}` },\r\n      })\r\n      .then((res) => res.data.chats)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const readMsg = async () => {\r\n      try {\r\n        if (chatSingle._id) {\r\n          await makeRequest.put(\r\n            \"/messages\",\r\n            { chatId: chatSingle._id },\r\n            {\r\n              headers: { Authorization: `Bearer ${currentUser.accessToken}` },\r\n            }\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    readMsg();\r\n  }, [chatSingle]);\r\n\r\n  return (\r\n    <div className=\"group-chat\">\r\n      <div className=\"group-chat-header\">\r\n        <div className=\"group-chat-top\">\r\n          <h2 className=\"group-chat-myname\">{currentUser.username}</h2>\r\n          <FaRegEdit\r\n            style={{ fontSize: \"24px\", cursor: \"pointer\" }}\r\n            onClick={() => handleOpenOptions(setOpenNewchat)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"group-chat-title\">\r\n          <p style={{ fontWeight: 700 }}>Messages</p>\r\n          <p style={{ color: \"gray\", fontSize: \"14px\", fontWeight: 500 }}>\r\n            Requests\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      {isLoading ? (\r\n        <GroupChatSkeleton groupchat={5} />\r\n      ) : error ? (\r\n        <p>Somethings went wrong...</p>\r\n      ) : (\r\n        <ul className=\"group-chat-list\">\r\n          {data.map((item) => (\r\n            <li\r\n              key={item._id}\r\n              onClick={() => handleOpenMessage(item)}\r\n              className={\r\n                chatSingle === item\r\n                  ? \"group-chat-item active\"\r\n                  : \"group-chat-item\"\r\n              }\r\n            >\r\n              <img\r\n                src={getInfoChat(item, currentUser).avatar}\r\n                alt=\"\"\r\n                className=\"group-chat-img\"\r\n              />\r\n              <div className=\"group-chat-info\">\r\n                <p className=\"group-chat-username\">\r\n                  {item.isGroupChat\r\n                    ? item.name\r\n                    : getInfoChat(item, currentUser).name}\r\n                </p>\r\n                <div className=\"group-chat-latest-msg\">\r\n                  <p\r\n                    className={\r\n                      item.latestMessage?.readBy.filter(\r\n                        (mem) => mem._id != currentUser.id\r\n                      )\r\n                        ? \"group-chat-latest-msg-text active\"\r\n                        : \"group-chat-latest-msg-text\"\r\n                    }\r\n                  >\r\n                    {!item.latestMessage\r\n                      ? \"\"\r\n                      : currentUser.id === item.latestMessage?.sender?._id\r\n                      ? `You: ${item.latestMessage?.content} `\r\n                      : item.latestMessage?.content}\r\n                  </p>\r\n                  <span className=\"group-chat-latest-msg-time\">\r\n                    {item.latestMessage &&\r\n                      `• ${formatTime(item.latestMessage?.createdAt)}`}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {openNewchat && (\r\n        <NewChat\r\n          type=\"Chat\"\r\n          setOpenNewchat={setOpenNewchat}\r\n          title=\"New message\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupChat;\r\n","const Typing = () => {\r\n  return (\r\n    <div class=\"container\">\r\n      <div class=\"typing-message\">\r\n        <span class=\"typing-dots\"></span>\r\n        <span class=\"typing-dots\"></span>\r\n        <span class=\"typing-dots\"></span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Typing;\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport makeRequest from \"../../services/makeRequest\";\r\nimport { BsEmojiSmile, BsFileImage } from \"react-icons/bs\";\r\nimport { HiOutlineMicrophone } from \"react-icons/hi\";\r\nimport { AiOutlineHeart } from \"react-icons/ai\";\r\nimport Loading from \"../loadings/Loading\";\r\n\r\nconst FormMessage = ({ chatSingle, setMessages }) => {\r\n  const { socket, currentUser } = useContext(AuthContext);\r\n  const [content, setContent] = useState(\"\");\r\n  const [loadingMsg, setLoadingMsg] = useState(false);\r\n  const [openEmojis, setOpenEmojis] = useState(false);\r\n  const [typingContent, setTypingContent] = useState(false);\r\n\r\n  // SEND MESSAGE\r\n  const handelSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if ((e.key === \"Enter\" || e.type === \"submit\") && content) {\r\n      socket.current && socket.current.emit(\"stop typing\", chatSingle._id);\r\n\r\n      try {\r\n        setLoadingMsg(true);\r\n        if (!content) return;\r\n        let newMsg = { content, chatId: chatSingle._id };\r\n        const res = await makeRequest.post(\"/messages\", newMsg, {\r\n          headers: { Authorization: `Bearer ${currentUser.accessToken}` },\r\n        });\r\n\r\n        socket.current && socket.current.emit(\"send-message\", res.data.msg);\r\n        setMessages((prev) => [...prev, res.data.msg]);\r\n        setLoadingMsg(false);\r\n        setContent(\"\");\r\n      } catch (error) {\r\n        setLoadingMsg(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.current &&\r\n      socket.current.on(\"get-message\", (msg) => {\r\n        setMessages((prev) => [...prev, msg]);\r\n      });\r\n  }, [socket]);\r\n\r\n  // HANDLE TYPING\r\n  const handleTyping = (e) => {\r\n    setContent(e.target.value);\r\n    if (!typingContent && socket.current) {\r\n      setTypingContent(true);\r\n      socket.current.emit(\"typing\", chatSingle._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    let timeDelay = 3000;\r\n    setTimeout(() => {\r\n      let timeNow = new Date().getTime();\r\n      let timeChange = timeNow - lastTypingTime;\r\n      if (timeChange >= timeDelay && typingContent) {\r\n        setTypingContent(false);\r\n        socket.current && socket.current.emit(\"stop typing\", chatSingle._id);\r\n      }\r\n    }, timeDelay);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"message-form\">\r\n      <form onSubmit={handelSendMessage}>\r\n        <div className=\"message-form-left\">\r\n          <BsEmojiSmile\r\n            style={{ fontSize: \"24px\", cursor: \"pointer\" }}\r\n            onClick={() => setOpenEmojis(!openEmojis)}\r\n          />\r\n          {loadingMsg && <Loading />}\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Message...\"\r\n            className=\"message-input\"\r\n            value={content}\r\n            onChange={handleTyping}\r\n          />\r\n        </div>\r\n        {content ? (\r\n          <button type=\"submit\" className=\"message-send-btn\">\r\n            Send\r\n          </button>\r\n        ) : (\r\n          <div className=\"message-actions\">\r\n            <HiOutlineMicrophone\r\n              style={{ fontSize: \"24px\", cursor: \"pointer\" }}\r\n            />\r\n            <BsFileImage\r\n              style={{\r\n                margin: \"0 15px\",\r\n                fontSize: \"24px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n            <AiOutlineHeart style={{ fontSize: \"24px\", cursor: \"pointer\" }} />\r\n          </div>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormMessage;\r\n","import { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { BsTelephone, BsCameraVideo } from \"react-icons/bs\";\r\nimport { HiOutlineInformationCircle } from \"react-icons/hi\";\r\nimport makeRequest from \"../../services/makeRequest\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { getInfoChat } from \"../../services/fetch\";\r\nimport Typing from \"./Typing\";\r\nimport { ChatContext } from \"../../context/ChatContext\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport FormMessage from \"./FormMessage\";\r\nimport Loading from \"../loadings/Loading\";\r\n\r\nconst Message = () => {\r\n  const { setOpenChatDetails, openChatDetails, chatSingle, loadingChat } =\r\n    useContext(ChatContext);\r\n  const { currentUser, socket } = useContext(AuthContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const msgsRef = useRef(null);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // FETCH ALL MESSAGES OF CHAT\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const res = await makeRequest.get(`/messages/${chatSingle._id}`, {\r\n          headers: { Authorization: `Bearer ${currentUser.accessToken}` },\r\n        });\r\n\r\n        setMessages(res.data.messages);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n  }, [chatSingle]);\r\n\r\n  useEffect(() => {\r\n    socket.current && socket.current.emit(\"join-room\", chatSingle._id);\r\n  }, [chatSingle]);\r\n\r\n  useEffect(() => {\r\n    socket.current.on(\"typing\", () => setIsTyping(true)); // all users of room can see\r\n    socket.current.on(\"stop typing\", () => setIsTyping(false));\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    msgsRef.current &&\r\n      msgsRef.current.scrollTo({\r\n        top: msgsRef.current.scrollHeight,\r\n        behavior: \"smooth\",\r\n      });\r\n  }, [messages]);\r\n\r\n  if (loadingChat) return <Loading />;\r\n\r\n  return (\r\n    <div className=\"message\">\r\n      <div className=\"message-header\">\r\n        <div className=\"message-header-info\">\r\n          <img\r\n            src={getInfoChat(chatSingle, currentUser).avatar}\r\n            alt=\"\"\r\n            className=\"message-header-img\"\r\n          />\r\n          <div className=\"message-header-detail\">\r\n            <p className=\"message-header-friendName\">\r\n              {chatSingle.isGroupChat\r\n                ? chatSingle.name\r\n                : getInfoChat(chatSingle, currentUser).name}\r\n            </p>\r\n            {/* <p className=\"message-header-active\">Active 1h ago</p> */}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"message-icons\">\r\n          <BsTelephone style={{ fontSize: \"24px\", cursor: \"pointer\" }} />\r\n          <BsCameraVideo\r\n            style={{ margin: \"0 15px\", fontSize: \"24px\", cursor: \"pointer\" }}\r\n          />\r\n          <HiOutlineInformationCircle\r\n            style={{ fontSize: \"24px\", cursor: \"pointer\" }}\r\n            onClick={() => setOpenChatDetails(!openChatDetails)}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"message-container\" ref={msgsRef}>\r\n        <div className=\"message-friend-info\">\r\n          <img\r\n            src={getInfoChat(chatSingle, currentUser).avatar}\r\n            alt=\"\"\r\n            className=\"message-friend-info-img\"\r\n          />\r\n          <p className=\"message-friend-info-name\">\r\n            {getInfoChat(chatSingle, currentUser).name}\r\n          </p>\r\n          <p className=\"message-friend-info-username\">\r\n            {getInfoChat(chatSingle, currentUser).username} • Keepstory\r\n          </p>\r\n          {chatSingle.groupAdmin?._id === currentUser.id ? (\r\n            <p>You created this group.</p>\r\n          ) : (\r\n            <Link\r\n              to={`/${\r\n                chatSingle.members.filter((m) => m._id !== currentUser.id)[0]\r\n                  .username\r\n              }`}\r\n              className=\"link\"\r\n            >\r\n              <button className=\"message-friend-info-btn\">View profile</button>\r\n            </Link>\r\n          )}\r\n        </div>\r\n\r\n        {loading ? (\r\n          <Loading />\r\n        ) : (\r\n          messages.map((item, index) => (\r\n            <div\r\n              className={\r\n                item.sender._id === currentUser.id ? \"msg myself\" : \"msg\"\r\n              }\r\n              key={item._id}\r\n            >\r\n              {item.sender._id !== messages[index + 1]?.sender._id && (\r\n                <img src={item.sender.avatar} alt=\"\" className=\"msg-avatar\" />\r\n              )}\r\n              <p\r\n                className=\"msg-text\"\r\n                style={{\r\n                  marginLeft:\r\n                    item.sender._id === messages[index + 1]?.sender._id\r\n                      ? \"36px\"\r\n                      : \"0\",\r\n                }}\r\n              >\r\n                {item.content}\r\n                <p\r\n                  className={\r\n                    item.sender._id === currentUser.id\r\n                      ? \"msg-time myself\"\r\n                      : \"msg-time\"\r\n                  }\r\n                >\r\n                  {moment(item.createdAt).format(\"h:mm A\")}\r\n                </p>\r\n              </p>\r\n              {/* <div\r\n                className={\r\n                  item.sender._id === currentUser.id\r\n                    ? \"msg-options myself\"\r\n                    : \"msg-options\"\r\n                }\r\n              >\r\n                <HiOutlineDotsHorizontal className=\"msg-icon\" />\r\n                <ul className=\"msg-select\">\r\n                  <li className=\"msg-item\">Copy</li>\r\n                  <li className=\"msg-item\">Unsend</li>\r\n                  <li className=\"msg-item\">Cancel</li>\r\n                </ul>\r\n              </div> */}\r\n            </div>\r\n          ))\r\n        )}\r\n        {isTyping ? <Typing /> : null}\r\n      </div>\r\n\r\n      <FormMessage\r\n        chatSingle={chatSingle}\r\n        setMessages={setMessages}\r\n        messages={messages}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import { AiOutlineClose } from \"react-icons/ai\";\r\nimport { handleCloseOptions } from \"../../services/fetch\";\r\nimport { useContext, useState } from \"react\";\r\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport makeRequest from \"../../services/makeRequest\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { ChatContext } from \"../../context/ChatContext\";\r\nimport Loading from \"../loadings/Loading\";\r\n\r\nconst ChangeName = ({ setOpenChangeName }) => {\r\n  const { chatSingle, setOpenChatDetails } = useContext(ChatContext);\r\n  const { currentUser, successMessage, errorMessage } = useContext(AuthContext);\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const queryClient = useQueryClient();\r\n  const mutation = useMutation(\r\n    async (changeNamed) => {\r\n      setLoading(true);\r\n      chatSingle &&\r\n        (await makeRequest\r\n          .patch(`/chats/name/${chatSingle?._id}`, changeNamed, {\r\n            headers: { Authorization: `Bearer ${currentUser.accessToken}` },\r\n          })\r\n          .then((res) => {\r\n            successMessage(res.data.message);\r\n            setLoading(false);\r\n          })\r\n          .catch(() => {\r\n            errorMessage(\"Something went wrong...\");\r\n            setLoading(false);\r\n          }));\r\n    },\r\n    {\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries([\"chats\"]);\r\n        queryClient.invalidateQueries([\"message\", chatSingle._id]);\r\n      },\r\n    }\r\n  );\r\n\r\n  const handleChangeName = () => {\r\n    mutation.mutate({ groupName });\r\n    if (!loading) {\r\n      handleCloseOptions(setOpenChangeName);\r\n      setOpenChatDetails(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"change-name\"\r\n      onClick={(e) =>\r\n        e.target.className === \"change-name\" &&\r\n        handleCloseOptions(setOpenChangeName)\r\n      }\r\n    >\r\n      <div className=\"change-name-container\">\r\n        <h2 className=\"change-name-title\">Change group name</h2>\r\n        <p className=\"change-name-desc\">\r\n          Changing the name of a group chat changes it for everyone.\r\n        </p>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Add a name\"\r\n          className=\"change-name-input\"\r\n          value={groupName}\r\n          onChange={(e) => setGroupName(e.target.value)}\r\n          autoFocus\r\n        />\r\n        <button className=\"change-name-btn\" onClick={handleChangeName}>\r\n          {loading ? <Loading /> : \"Save\"}\r\n        </button>\r\n        <AiOutlineClose\r\n          className=\"change-name-close\"\r\n          onClick={() => handleCloseOptions(setOpenChangeName)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChangeName;\r\n","import { useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport makeRequest from \"../../services/makeRequest\";\r\nimport { useContext, useState } from \"react\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport NewChat from \"./NewChat\";\r\nimport { handleOpenOptions } from \"../../services/fetch\";\r\nimport ChangeName from \"./ChangeName\";\r\nimport { ChatContext } from \"../../context/ChatContext\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport Loading from \"../loadings/Loading\";\r\n\r\nconst ChatDetails = () => {\r\n  const { chatSingle, handleOpenMessage } = useContext(ChatContext);\r\n  const { currentUser, successMessage, errorMessage } = useContext(AuthContext);\r\n  const [openNewchat, setOpenNewchat] = useState(false);\r\n  const [openChangeName, setOpenChangeName] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n  const mutationChat = useMutation(\r\n    async (chatRemoved) => {\r\n      setLoading(true);\r\n      chatSingle &&\r\n        (await makeRequest\r\n          .delete(`/chats/${chatSingle?._id}`, {\r\n            headers: { Authorization: `Bearer ${currentUser.accessToken}` },\r\n          })\r\n          .then((res) => {\r\n            successMessage(res.data.message);\r\n            setLoading(false);\r\n            setTimeout(() => {\r\n              window.location.reload();\r\n            }, 800);\r\n          })\r\n          .catch(() => {\r\n            errorMessage(\"Something went wrong...\");\r\n            setLoading(false);\r\n          }));\r\n    },\r\n    {\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries([\"chats\"]);\r\n      },\r\n    }\r\n  );\r\n\r\n  const handleRemovedChat = () => {\r\n    mutationChat.mutate();\r\n  };\r\n\r\n  const mutationMember = useMutation(\r\n    async (memberRemoved) => {\r\n      setLoading(true);\r\n      chatSingle &&\r\n        (await makeRequest\r\n          .put(`/chats/${chatSingle?._id}`, memberRemoved, {\r\n            headers: { Authorization: `Bearer ${currentUser.accessToken}` },\r\n          })\r\n          .then((res) => {\r\n            successMessage(res.data.message);\r\n            handleOpenMessage(res.data.chat);\r\n            setLoading(false);\r\n          })\r\n          .catch(() => {\r\n            errorMessage(\"Something went wrong...\");\r\n            setLoading(false);\r\n          }));\r\n    },\r\n    {\r\n      onSuccess: () => {\r\n        // queryClient.invalidateQueries([\"message\", chatSingle._id]);\r\n        queryClient.invalidateQueries([\"chats\"]);\r\n      },\r\n    }\r\n  );\r\n\r\n  const handleRemovedMember = (userRemoved) => {\r\n    mutationMember.mutate({ userRemoved });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-details\">\r\n      {loading && <Loading />}\r\n      <p className=\"chat-details-title\">Details</p>\r\n      {chatSingle.isGroupChat && (\r\n        <div className=\"chat-group\">\r\n          <p className=\"chat-group-name\">{chatSingle.name}</p>\r\n          <button\r\n            className=\"chat-group-btn\"\r\n            onClick={() => handleOpenOptions(setOpenChangeName)}\r\n          >\r\n            Change\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"chat-members\">\r\n        <div className=\"chat-members-top\">\r\n          <p className=\"chat-members-title\">Members</p>\r\n          <p\r\n            className=\"chat-members-btn\"\r\n            onClick={() => handleOpenOptions(setOpenNewchat)}\r\n          >\r\n            {chatSingle.isGroupChat && \"Add people\"}\r\n          </p>\r\n        </div>\r\n        <ul className=\"chat-members-list\">\r\n          {chatSingle.members.map((item) => (\r\n            <li className=\"chat-members-item\" key={item._id}>\r\n              <div className=\"chat-members-info\">\r\n                <img src={item.avatar} alt=\"\" className=\"chat-members-img\" />\r\n                <div className=\"chat-members-info-details\">\r\n                  <p className=\"chat-members-username\">{item.username}</p>\r\n                  <span className=\"chat-members-role\">\r\n                    {item._id === chatSingle.groupAdmin?._id\r\n                      ? \"Admin\"\r\n                      : \"Member\"}\r\n                  </span>\r\n                  <span className=\"chat-members-name\">• {item.name}</span>\r\n                </div>\r\n              </div>\r\n              {chatSingle.isGroupChat && (\r\n                <div\r\n                  className=\"chat-members-remove-btn\"\r\n                  onClick={() => handleRemovedMember(item._id)}\r\n                >\r\n                  <AiOutlineClose />\r\n                </div>\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"chat-details-more\">\r\n        <p className=\"chat-details-text\">\r\n          You won't get messages from this group unless someone adds you back to\r\n          the chat\r\n        </p>\r\n        <p className=\"chat-details-btn-delete\" onClick={handleRemovedChat}>\r\n          Delete chat\r\n        </p>\r\n      </div>\r\n      {openNewchat && (\r\n        <NewChat\r\n          setOpenNewchat={setOpenNewchat}\r\n          type=\"Add to group\"\r\n          title=\"Add people\"\r\n        />\r\n      )}\r\n      {openChangeName && <ChangeName setOpenChangeName={setOpenChangeName} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatDetails;\r\n","import { useContext, useState } from \"react\";\r\nimport GroupChat from \"../components/chats/GroupChat\";\r\nimport Sidebar from \"../components/sidebars/Sidebar\";\r\nimport Message from \"../components/chats/Message\";\r\nimport { FaFacebookMessenger } from \"react-icons/fa\";\r\nimport ChatDetails from \"../components/chats/ChatDetails\";\r\nimport { ChatContext } from \"../context/ChatContext\";\r\nimport { handleOpenOptions } from \"../services/fetch\";\r\nimport NewChat from \"../components/chats/NewChat\";\r\n\r\nconst Chat = () => {\r\n  const { openChatDetails, isChatting } = useContext(ChatContext);\r\n  const [openNewchat, setOpenNewchat] = useState(false);\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <Sidebar type=\"message\" />\r\n      <div className=\"chat-container\">\r\n        <GroupChat />\r\n        {isChatting ? (\r\n          <Message />\r\n        ) : (\r\n          <div className=\"chat-guide\">\r\n            <div className=\"chat-guide-icon\">\r\n              <FaFacebookMessenger style={{ fontSize: \"40px\" }} />\r\n            </div>\r\n            <h1>Your Message</h1>\r\n            <p className=\"chat-guide-text\">\r\n              Send private photos and messages to a friend or group.\r\n            </p>\r\n            <button\r\n              className=\"chat-guide-btn\"\r\n              onClick={() => handleOpenOptions(setOpenNewchat)}\r\n            >\r\n              Send Message\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {openChatDetails && <ChatDetails />}\r\n        {openNewchat && <NewChat type=\"Chat\" setOpenNewchat={setOpenNewchat} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"names":["_ref","setOpenNewchat","type","title","_useContext","useContext","ChatContext","handleOpenMessage","chatSingle","_useContext2","AuthContext","currentUser","successMessage","_useState","useState","_useState2","_slicedToArray","keyword","setKeyword","_useState3","_useState4","results","setResults","_useState5","_useState6","loadingSearch","setLoadingSearch","_useState7","_useState8","loadingNewChat","setLoadingNewChat","_useState9","members","_useState10","selectedUser","setSelectedUser","handleSearch","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","abrupt","makeRequest","get","concat","headers","Authorization","accessToken","sent","data","t0","console","log","stop","_x","apply","arguments","handleChooseFriend","userAdd","map","s","_id","includes","_toConsumableArray","queryClient","useQueryClient","handleChatGroup","_ref3","_callee2","_res","_context2","JSON","stringify","chat","patch","people","message","invalidateQueries","_jsx","className","onClick","e","target","handleCloseOptions","children","_jsxs","Loading","item","name","AiOutlineClose","style","cursor","userRemove","filter","placeholder","value","onChange","length","src","avatar","alt","username","MdRadioButtonChecked","MdRadioButtonUnchecked","textAlign","color","groupchat","Array","fill","i","Skeleton","circle","width","height","openNewchat","_useQuery","useQuery","then","chats","isLoading","error","useEffect","readMsg","put","chatId","FaRegEdit","fontSize","handleOpenOptions","fontWeight","GroupChatSkeleton","_item$latestMessage","_item$latestMessage2","_item$latestMessage2$","_item$latestMessage3","_item$latestMessage4","_item$latestMessage5","getInfoChat","isGroupChat","latestMessage","readBy","mem","id","sender","content","formatTime","createdAt","NewChat","class","setMessages","socket","setContent","loadingMsg","setLoadingMsg","openEmojis","setOpenEmojis","typingContent","setTypingContent","handelSendMessage","newMsg","preventDefault","key","current","emit","post","msg","on","onSubmit","BsEmojiSmile","lastTypingTime","Date","getTime","setTimeout","HiOutlineMicrophone","BsFileImage","margin","AiOutlineHeart","_chatSingle$groupAdmi","setOpenChatDetails","openChatDetails","loadingChat","loading","setLoading","msgsRef","useRef","isTyping","setIsTyping","messages","fetchMessages","scrollTo","top","scrollHeight","behavior","BsTelephone","BsCameraVideo","HiOutlineInformationCircle","ref","groupAdmin","Link","to","m","index","_messages","_messages2","marginLeft","moment","format","Typing","FormMessage","setOpenChangeName","errorMessage","groupName","setGroupName","mutation","useMutation","changeNamed","catch","onSuccess","autoFocus","mutate","openChangeName","useNavigate","mutationChat","chatRemoved","delete","window","location","reload","mutationMember","memberRemoved","_x2","userRemoved","ChangeName","isChatting","Sidebar","GroupChat","Message","FaFacebookMessenger","ChatDetails"],"sourceRoot":""}